// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eroshiva/trade-show-poc/internal/ent/devicestatus"
)

// DeviceStatus is the model entity for the DeviceStatus schema.
type DeviceStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status devicestatus.Status `json:"status,omitempty"`
	// LastSeen holds the value of the "last_seen" field.
	LastSeen     string `json:"last_seen,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicestatus.FieldID, devicestatus.FieldStatus, devicestatus.FieldLastSeen:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceStatus fields.
func (ds *DeviceStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicestatus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ds.ID = value.String
			}
		case devicestatus.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ds.Status = devicestatus.Status(value.String)
			}
		case devicestatus.FieldLastSeen:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				ds.LastSeen = value.String
			}
		default:
			ds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceStatus.
// This includes values selected through modifiers, order, etc.
func (ds *DeviceStatus) Value(name string) (ent.Value, error) {
	return ds.selectValues.Get(name)
}

// Update returns a builder for updating this DeviceStatus.
// Note that you need to call DeviceStatus.Unwrap() before calling this method if this DeviceStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DeviceStatus) Update() *DeviceStatusUpdateOne {
	return NewDeviceStatusClient(ds.config).UpdateOne(ds)
}

// Unwrap unwraps the DeviceStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DeviceStatus) Unwrap() *DeviceStatus {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceStatus is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DeviceStatus) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ds.Status))
	builder.WriteString(", ")
	builder.WriteString("last_seen=")
	builder.WriteString(ds.LastSeen)
	builder.WriteByte(')')
	return builder.String()
}

// DeviceStatusSlice is a parsable slice of DeviceStatus.
type DeviceStatusSlice []*DeviceStatus
