// Code generated by ent, DO NOT EDIT.

package endpoint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldID, id))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldHost, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldPort, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldHost, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldPort, v))
}

// PortContains applies the Contains predicate on the "port" field.
func PortContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldPort, v))
}

// PortHasPrefix applies the HasPrefix predicate on the "port" field.
func PortHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldPort, v))
}

// PortHasSuffix applies the HasSuffix predicate on the "port" field.
func PortHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldPort, v))
}

// PortEqualFold applies the EqualFold predicate on the "port" field.
func PortEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldPort, v))
}

// PortContainsFold applies the ContainsFold predicate on the "port" field.
func PortContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldPort, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v Protocol) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v Protocol) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...Protocol) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...Protocol) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldProtocol, vs...))
}

// HasNetworkDevice applies the HasEdge predicate on the "network_device" edge.
func HasNetworkDevice() predicate.Endpoint {
	return predicate.Endpoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NetworkDeviceTable, NetworkDeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkDeviceWith applies the HasEdge predicate on the "network_device" edge with a given conditions (other predicates).
func HasNetworkDeviceWith(preds ...predicate.NetworkDevice) predicate.Endpoint {
	return predicate.Endpoint(func(s *sql.Selector) {
		step := newNetworkDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.NotPredicates(p))
}
