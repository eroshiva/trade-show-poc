// Code generated by ent, DO NOT EDIT.

package endpoint

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the endpoint type in the database.
	Label = "endpoint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// EdgeNetworkDevice holds the string denoting the network_device edge name in mutations.
	EdgeNetworkDevice = "network_device"
	// Table holds the table name of the endpoint in the database.
	Table = "endpoints"
	// NetworkDeviceTable is the table that holds the network_device relation/edge. The primary key declared below.
	NetworkDeviceTable = "network_device_endpoint"
	// NetworkDeviceInverseTable is the table name for the NetworkDevice entity.
	// It exists in this package in order to avoid circular dependency with the "networkdevice" package.
	NetworkDeviceInverseTable = "network_devices"
)

// Columns holds all SQL columns for endpoint fields.
var Columns = []string{
	FieldID,
	FieldHost,
	FieldPort,
	FieldProtocol,
}

var (
	// NetworkDevicePrimaryKey and NetworkDeviceColumn2 are the table columns denoting the
	// primary key for the network_device relation (M2M).
	NetworkDevicePrimaryKey = []string{"network_device_id", "endpoint_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Protocol defines the type for the "protocol" enum field.
type Protocol string

// Protocol values.
const (
	ProtocolPROTOCOL_UNSPECIFIED   Protocol = "PROTOCOL_UNSPECIFIED"
	ProtocolPROTOCOL_SNMP          Protocol = "PROTOCOL_SNMP"
	ProtocolPROTOCOL_NETCONF       Protocol = "PROTOCOL_NETCONF"
	ProtocolPROTOCOL_RESTCONF      Protocol = "PROTOCOL_RESTCONF"
	ProtocolPROTOCOL_OPEN_V_SWITCH Protocol = "PROTOCOL_OPEN_V_SWITCH"
)

func (pr Protocol) String() string {
	return string(pr)
}

// ProtocolValidator is a validator for the "protocol" field enum values. It is called by the builders before save.
func ProtocolValidator(pr Protocol) error {
	switch pr {
	case ProtocolPROTOCOL_UNSPECIFIED, ProtocolPROTOCOL_SNMP, ProtocolPROTOCOL_NETCONF, ProtocolPROTOCOL_RESTCONF, ProtocolPROTOCOL_OPEN_V_SWITCH:
		return nil
	default:
		return fmt.Errorf("endpoint: invalid enum value for protocol field: %q", pr)
	}
}

// OrderOption defines the ordering options for the Endpoint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByNetworkDeviceCount orders the results by network_device count.
func ByNetworkDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNetworkDeviceStep(), opts...)
	}
}

// ByNetworkDevice orders the results by network_device terms.
func ByNetworkDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNetworkDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNetworkDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NetworkDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NetworkDeviceTable, NetworkDevicePrimaryKey...),
	)
}
