// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eroshiva/trade-show-poc/internal/ent/endpoint"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
	"github.com/eroshiva/trade-show-poc/internal/ent/version"
)

// NetworkDeviceUpdate is the builder for updating NetworkDevice entities.
type NetworkDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkDeviceMutation
}

// Where appends a list predicates to the NetworkDeviceUpdate builder.
func (ndu *NetworkDeviceUpdate) Where(ps ...predicate.NetworkDevice) *NetworkDeviceUpdate {
	ndu.mutation.Where(ps...)
	return ndu
}

// SetVendor sets the "vendor" field.
func (ndu *NetworkDeviceUpdate) SetVendor(n networkdevice.Vendor) *NetworkDeviceUpdate {
	ndu.mutation.SetVendor(n)
	return ndu
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ndu *NetworkDeviceUpdate) SetNillableVendor(n *networkdevice.Vendor) *NetworkDeviceUpdate {
	if n != nil {
		ndu.SetVendor(*n)
	}
	return ndu
}

// SetModel sets the "model" field.
func (ndu *NetworkDeviceUpdate) SetModel(s string) *NetworkDeviceUpdate {
	ndu.mutation.SetModel(s)
	return ndu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (ndu *NetworkDeviceUpdate) SetNillableModel(s *string) *NetworkDeviceUpdate {
	if s != nil {
		ndu.SetModel(*s)
	}
	return ndu
}

// SetHwVersion sets the "hw_version" field.
func (ndu *NetworkDeviceUpdate) SetHwVersion(s string) *NetworkDeviceUpdate {
	ndu.mutation.SetHwVersion(s)
	return ndu
}

// SetNillableHwVersion sets the "hw_version" field if the given value is not nil.
func (ndu *NetworkDeviceUpdate) SetNillableHwVersion(s *string) *NetworkDeviceUpdate {
	if s != nil {
		ndu.SetHwVersion(*s)
	}
	return ndu
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (ndu *NetworkDeviceUpdate) AddEndpointIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.AddEndpointIDs(ids...)
	return ndu
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (ndu *NetworkDeviceUpdate) AddEndpoints(e ...*Endpoint) *NetworkDeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ndu.AddEndpointIDs(ids...)
}

// AddSwVersionIDs adds the "sw_version" edge to the Version entity by IDs.
func (ndu *NetworkDeviceUpdate) AddSwVersionIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.AddSwVersionIDs(ids...)
	return ndu
}

// AddSwVersion adds the "sw_version" edges to the Version entity.
func (ndu *NetworkDeviceUpdate) AddSwVersion(v ...*Version) *NetworkDeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndu.AddSwVersionIDs(ids...)
}

// AddFwVersionIDs adds the "fw_version" edge to the Version entity by IDs.
func (ndu *NetworkDeviceUpdate) AddFwVersionIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.AddFwVersionIDs(ids...)
	return ndu
}

// AddFwVersion adds the "fw_version" edges to the Version entity.
func (ndu *NetworkDeviceUpdate) AddFwVersion(v ...*Version) *NetworkDeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndu.AddFwVersionIDs(ids...)
}

// Mutation returns the NetworkDeviceMutation object of the builder.
func (ndu *NetworkDeviceUpdate) Mutation() *NetworkDeviceMutation {
	return ndu.mutation
}

// ClearEndpoints clears all "endpoints" edges to the Endpoint entity.
func (ndu *NetworkDeviceUpdate) ClearEndpoints() *NetworkDeviceUpdate {
	ndu.mutation.ClearEndpoints()
	return ndu
}

// RemoveEndpointIDs removes the "endpoints" edge to Endpoint entities by IDs.
func (ndu *NetworkDeviceUpdate) RemoveEndpointIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.RemoveEndpointIDs(ids...)
	return ndu
}

// RemoveEndpoints removes "endpoints" edges to Endpoint entities.
func (ndu *NetworkDeviceUpdate) RemoveEndpoints(e ...*Endpoint) *NetworkDeviceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ndu.RemoveEndpointIDs(ids...)
}

// ClearSwVersion clears all "sw_version" edges to the Version entity.
func (ndu *NetworkDeviceUpdate) ClearSwVersion() *NetworkDeviceUpdate {
	ndu.mutation.ClearSwVersion()
	return ndu
}

// RemoveSwVersionIDs removes the "sw_version" edge to Version entities by IDs.
func (ndu *NetworkDeviceUpdate) RemoveSwVersionIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.RemoveSwVersionIDs(ids...)
	return ndu
}

// RemoveSwVersion removes "sw_version" edges to Version entities.
func (ndu *NetworkDeviceUpdate) RemoveSwVersion(v ...*Version) *NetworkDeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndu.RemoveSwVersionIDs(ids...)
}

// ClearFwVersion clears all "fw_version" edges to the Version entity.
func (ndu *NetworkDeviceUpdate) ClearFwVersion() *NetworkDeviceUpdate {
	ndu.mutation.ClearFwVersion()
	return ndu
}

// RemoveFwVersionIDs removes the "fw_version" edge to Version entities by IDs.
func (ndu *NetworkDeviceUpdate) RemoveFwVersionIDs(ids ...int) *NetworkDeviceUpdate {
	ndu.mutation.RemoveFwVersionIDs(ids...)
	return ndu
}

// RemoveFwVersion removes "fw_version" edges to Version entities.
func (ndu *NetworkDeviceUpdate) RemoveFwVersion(v ...*Version) *NetworkDeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndu.RemoveFwVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ndu *NetworkDeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ndu.sqlSave, ndu.mutation, ndu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ndu *NetworkDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := ndu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ndu *NetworkDeviceUpdate) Exec(ctx context.Context) error {
	_, err := ndu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndu *NetworkDeviceUpdate) ExecX(ctx context.Context) {
	if err := ndu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ndu *NetworkDeviceUpdate) check() error {
	if v, ok := ndu.mutation.Vendor(); ok {
		if err := networkdevice.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`ent: validator failed for field "NetworkDevice.vendor": %w`, err)}
		}
	}
	return nil
}

func (ndu *NetworkDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ndu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkdevice.Table, networkdevice.Columns, sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString))
	if ps := ndu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ndu.mutation.Vendor(); ok {
		_spec.SetField(networkdevice.FieldVendor, field.TypeEnum, value)
	}
	if value, ok := ndu.mutation.Model(); ok {
		_spec.SetField(networkdevice.FieldModel, field.TypeString, value)
	}
	if value, ok := ndu.mutation.HwVersion(); ok {
		_spec.SetField(networkdevice.FieldHwVersion, field.TypeString, value)
	}
	if ndu.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.RemovedEndpointsIDs(); len(nodes) > 0 && !ndu.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ndu.mutation.SwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.RemovedSwVersionIDs(); len(nodes) > 0 && !ndu.mutation.SwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.SwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ndu.mutation.FwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.RemovedFwVersionIDs(); len(nodes) > 0 && !ndu.mutation.FwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ndu.mutation.FwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ndu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ndu.mutation.done = true
	return n, nil
}

// NetworkDeviceUpdateOne is the builder for updating a single NetworkDevice entity.
type NetworkDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkDeviceMutation
}

// SetVendor sets the "vendor" field.
func (nduo *NetworkDeviceUpdateOne) SetVendor(n networkdevice.Vendor) *NetworkDeviceUpdateOne {
	nduo.mutation.SetVendor(n)
	return nduo
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (nduo *NetworkDeviceUpdateOne) SetNillableVendor(n *networkdevice.Vendor) *NetworkDeviceUpdateOne {
	if n != nil {
		nduo.SetVendor(*n)
	}
	return nduo
}

// SetModel sets the "model" field.
func (nduo *NetworkDeviceUpdateOne) SetModel(s string) *NetworkDeviceUpdateOne {
	nduo.mutation.SetModel(s)
	return nduo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (nduo *NetworkDeviceUpdateOne) SetNillableModel(s *string) *NetworkDeviceUpdateOne {
	if s != nil {
		nduo.SetModel(*s)
	}
	return nduo
}

// SetHwVersion sets the "hw_version" field.
func (nduo *NetworkDeviceUpdateOne) SetHwVersion(s string) *NetworkDeviceUpdateOne {
	nduo.mutation.SetHwVersion(s)
	return nduo
}

// SetNillableHwVersion sets the "hw_version" field if the given value is not nil.
func (nduo *NetworkDeviceUpdateOne) SetNillableHwVersion(s *string) *NetworkDeviceUpdateOne {
	if s != nil {
		nduo.SetHwVersion(*s)
	}
	return nduo
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (nduo *NetworkDeviceUpdateOne) AddEndpointIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.AddEndpointIDs(ids...)
	return nduo
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (nduo *NetworkDeviceUpdateOne) AddEndpoints(e ...*Endpoint) *NetworkDeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nduo.AddEndpointIDs(ids...)
}

// AddSwVersionIDs adds the "sw_version" edge to the Version entity by IDs.
func (nduo *NetworkDeviceUpdateOne) AddSwVersionIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.AddSwVersionIDs(ids...)
	return nduo
}

// AddSwVersion adds the "sw_version" edges to the Version entity.
func (nduo *NetworkDeviceUpdateOne) AddSwVersion(v ...*Version) *NetworkDeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nduo.AddSwVersionIDs(ids...)
}

// AddFwVersionIDs adds the "fw_version" edge to the Version entity by IDs.
func (nduo *NetworkDeviceUpdateOne) AddFwVersionIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.AddFwVersionIDs(ids...)
	return nduo
}

// AddFwVersion adds the "fw_version" edges to the Version entity.
func (nduo *NetworkDeviceUpdateOne) AddFwVersion(v ...*Version) *NetworkDeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nduo.AddFwVersionIDs(ids...)
}

// Mutation returns the NetworkDeviceMutation object of the builder.
func (nduo *NetworkDeviceUpdateOne) Mutation() *NetworkDeviceMutation {
	return nduo.mutation
}

// ClearEndpoints clears all "endpoints" edges to the Endpoint entity.
func (nduo *NetworkDeviceUpdateOne) ClearEndpoints() *NetworkDeviceUpdateOne {
	nduo.mutation.ClearEndpoints()
	return nduo
}

// RemoveEndpointIDs removes the "endpoints" edge to Endpoint entities by IDs.
func (nduo *NetworkDeviceUpdateOne) RemoveEndpointIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.RemoveEndpointIDs(ids...)
	return nduo
}

// RemoveEndpoints removes "endpoints" edges to Endpoint entities.
func (nduo *NetworkDeviceUpdateOne) RemoveEndpoints(e ...*Endpoint) *NetworkDeviceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nduo.RemoveEndpointIDs(ids...)
}

// ClearSwVersion clears all "sw_version" edges to the Version entity.
func (nduo *NetworkDeviceUpdateOne) ClearSwVersion() *NetworkDeviceUpdateOne {
	nduo.mutation.ClearSwVersion()
	return nduo
}

// RemoveSwVersionIDs removes the "sw_version" edge to Version entities by IDs.
func (nduo *NetworkDeviceUpdateOne) RemoveSwVersionIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.RemoveSwVersionIDs(ids...)
	return nduo
}

// RemoveSwVersion removes "sw_version" edges to Version entities.
func (nduo *NetworkDeviceUpdateOne) RemoveSwVersion(v ...*Version) *NetworkDeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nduo.RemoveSwVersionIDs(ids...)
}

// ClearFwVersion clears all "fw_version" edges to the Version entity.
func (nduo *NetworkDeviceUpdateOne) ClearFwVersion() *NetworkDeviceUpdateOne {
	nduo.mutation.ClearFwVersion()
	return nduo
}

// RemoveFwVersionIDs removes the "fw_version" edge to Version entities by IDs.
func (nduo *NetworkDeviceUpdateOne) RemoveFwVersionIDs(ids ...int) *NetworkDeviceUpdateOne {
	nduo.mutation.RemoveFwVersionIDs(ids...)
	return nduo
}

// RemoveFwVersion removes "fw_version" edges to Version entities.
func (nduo *NetworkDeviceUpdateOne) RemoveFwVersion(v ...*Version) *NetworkDeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nduo.RemoveFwVersionIDs(ids...)
}

// Where appends a list predicates to the NetworkDeviceUpdate builder.
func (nduo *NetworkDeviceUpdateOne) Where(ps ...predicate.NetworkDevice) *NetworkDeviceUpdateOne {
	nduo.mutation.Where(ps...)
	return nduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nduo *NetworkDeviceUpdateOne) Select(field string, fields ...string) *NetworkDeviceUpdateOne {
	nduo.fields = append([]string{field}, fields...)
	return nduo
}

// Save executes the query and returns the updated NetworkDevice entity.
func (nduo *NetworkDeviceUpdateOne) Save(ctx context.Context) (*NetworkDevice, error) {
	return withHooks(ctx, nduo.sqlSave, nduo.mutation, nduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nduo *NetworkDeviceUpdateOne) SaveX(ctx context.Context) *NetworkDevice {
	node, err := nduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nduo *NetworkDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := nduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nduo *NetworkDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := nduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nduo *NetworkDeviceUpdateOne) check() error {
	if v, ok := nduo.mutation.Vendor(); ok {
		if err := networkdevice.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`ent: validator failed for field "NetworkDevice.vendor": %w`, err)}
		}
	}
	return nil
}

func (nduo *NetworkDeviceUpdateOne) sqlSave(ctx context.Context) (_node *NetworkDevice, err error) {
	if err := nduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkdevice.Table, networkdevice.Columns, sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString))
	id, ok := nduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NetworkDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networkdevice.FieldID)
		for _, f := range fields {
			if !networkdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != networkdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nduo.mutation.Vendor(); ok {
		_spec.SetField(networkdevice.FieldVendor, field.TypeEnum, value)
	}
	if value, ok := nduo.mutation.Model(); ok {
		_spec.SetField(networkdevice.FieldModel, field.TypeString, value)
	}
	if value, ok := nduo.mutation.HwVersion(); ok {
		_spec.SetField(networkdevice.FieldHwVersion, field.TypeString, value)
	}
	if nduo.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.RemovedEndpointsIDs(); len(nodes) > 0 && !nduo.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nduo.mutation.SwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.RemovedSwVersionIDs(); len(nodes) > 0 && !nduo.mutation.SwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.SwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nduo.mutation.FwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.RemovedFwVersionIDs(); len(nodes) > 0 && !nduo.mutation.FwVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nduo.mutation.FwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetworkDevice{config: nduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nduo.mutation.done = true
	return _node, nil
}
