// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/eroshiva/trade-show-poc/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eroshiva/trade-show-poc/internal/ent/devicestatus"
	"github.com/eroshiva/trade-show-poc/internal/ent/endpoint"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/version"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DeviceStatus is the client for interacting with the DeviceStatus builders.
	DeviceStatus *DeviceStatusClient
	// Endpoint is the client for interacting with the Endpoint builders.
	Endpoint *EndpointClient
	// NetworkDevice is the client for interacting with the NetworkDevice builders.
	NetworkDevice *NetworkDeviceClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DeviceStatus = NewDeviceStatusClient(c.config)
	c.Endpoint = NewEndpointClient(c.config)
	c.NetworkDevice = NewNetworkDeviceClient(c.config)
	c.Version = NewVersionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DeviceStatus:  NewDeviceStatusClient(cfg),
		Endpoint:      NewEndpointClient(cfg),
		NetworkDevice: NewNetworkDeviceClient(cfg),
		Version:       NewVersionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DeviceStatus:  NewDeviceStatusClient(cfg),
		Endpoint:      NewEndpointClient(cfg),
		NetworkDevice: NewNetworkDeviceClient(cfg),
		Version:       NewVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DeviceStatus.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DeviceStatus.Use(hooks...)
	c.Endpoint.Use(hooks...)
	c.NetworkDevice.Use(hooks...)
	c.Version.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DeviceStatus.Intercept(interceptors...)
	c.Endpoint.Intercept(interceptors...)
	c.NetworkDevice.Intercept(interceptors...)
	c.Version.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DeviceStatusMutation:
		return c.DeviceStatus.mutate(ctx, m)
	case *EndpointMutation:
		return c.Endpoint.mutate(ctx, m)
	case *NetworkDeviceMutation:
		return c.NetworkDevice.mutate(ctx, m)
	case *VersionMutation:
		return c.Version.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DeviceStatusClient is a client for the DeviceStatus schema.
type DeviceStatusClient struct {
	config
}

// NewDeviceStatusClient returns a client for the DeviceStatus from the given config.
func NewDeviceStatusClient(c config) *DeviceStatusClient {
	return &DeviceStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `devicestatus.Hooks(f(g(h())))`.
func (c *DeviceStatusClient) Use(hooks ...Hook) {
	c.hooks.DeviceStatus = append(c.hooks.DeviceStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `devicestatus.Intercept(f(g(h())))`.
func (c *DeviceStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceStatus = append(c.inters.DeviceStatus, interceptors...)
}

// Create returns a builder for creating a DeviceStatus entity.
func (c *DeviceStatusClient) Create() *DeviceStatusCreate {
	mutation := newDeviceStatusMutation(c.config, OpCreate)
	return &DeviceStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceStatus entities.
func (c *DeviceStatusClient) CreateBulk(builders ...*DeviceStatusCreate) *DeviceStatusCreateBulk {
	return &DeviceStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceStatusClient) MapCreateBulk(slice any, setFunc func(*DeviceStatusCreate, int)) *DeviceStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceStatusCreateBulk{err: fmt.Errorf("calling to DeviceStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceStatus.
func (c *DeviceStatusClient) Update() *DeviceStatusUpdate {
	mutation := newDeviceStatusMutation(c.config, OpUpdate)
	return &DeviceStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceStatusClient) UpdateOne(ds *DeviceStatus) *DeviceStatusUpdateOne {
	mutation := newDeviceStatusMutation(c.config, OpUpdateOne, withDeviceStatus(ds))
	return &DeviceStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceStatusClient) UpdateOneID(id string) *DeviceStatusUpdateOne {
	mutation := newDeviceStatusMutation(c.config, OpUpdateOne, withDeviceStatusID(id))
	return &DeviceStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceStatus.
func (c *DeviceStatusClient) Delete() *DeviceStatusDelete {
	mutation := newDeviceStatusMutation(c.config, OpDelete)
	return &DeviceStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceStatusClient) DeleteOne(ds *DeviceStatus) *DeviceStatusDeleteOne {
	return c.DeleteOneID(ds.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceStatusClient) DeleteOneID(id string) *DeviceStatusDeleteOne {
	builder := c.Delete().Where(devicestatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceStatusDeleteOne{builder}
}

// Query returns a query builder for DeviceStatus.
func (c *DeviceStatusClient) Query() *DeviceStatusQuery {
	return &DeviceStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceStatus entity by its id.
func (c *DeviceStatusClient) Get(ctx context.Context, id string) (*DeviceStatus, error) {
	return c.Query().Where(devicestatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceStatusClient) GetX(ctx context.Context, id string) *DeviceStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkDevice queries the network_device edge of a DeviceStatus.
func (c *DeviceStatusClient) QueryNetworkDevice(ds *DeviceStatus) *NetworkDeviceQuery {
	query := (&NetworkDeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ds.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(devicestatus.Table, devicestatus.FieldID, id),
			sqlgraph.To(networkdevice.Table, networkdevice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, devicestatus.NetworkDeviceTable, devicestatus.NetworkDeviceColumn),
		)
		fromV = sqlgraph.Neighbors(ds.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceStatusClient) Hooks() []Hook {
	return c.hooks.DeviceStatus
}

// Interceptors returns the client interceptors.
func (c *DeviceStatusClient) Interceptors() []Interceptor {
	return c.inters.DeviceStatus
}

func (c *DeviceStatusClient) mutate(ctx context.Context, m *DeviceStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeviceStatus mutation op: %q", m.Op())
	}
}

// EndpointClient is a client for the Endpoint schema.
type EndpointClient struct {
	config
}

// NewEndpointClient returns a client for the Endpoint from the given config.
func NewEndpointClient(c config) *EndpointClient {
	return &EndpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `endpoint.Hooks(f(g(h())))`.
func (c *EndpointClient) Use(hooks ...Hook) {
	c.hooks.Endpoint = append(c.hooks.Endpoint, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `endpoint.Intercept(f(g(h())))`.
func (c *EndpointClient) Intercept(interceptors ...Interceptor) {
	c.inters.Endpoint = append(c.inters.Endpoint, interceptors...)
}

// Create returns a builder for creating a Endpoint entity.
func (c *EndpointClient) Create() *EndpointCreate {
	mutation := newEndpointMutation(c.config, OpCreate)
	return &EndpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Endpoint entities.
func (c *EndpointClient) CreateBulk(builders ...*EndpointCreate) *EndpointCreateBulk {
	return &EndpointCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EndpointClient) MapCreateBulk(slice any, setFunc func(*EndpointCreate, int)) *EndpointCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EndpointCreateBulk{err: fmt.Errorf("calling to EndpointClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EndpointCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EndpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Endpoint.
func (c *EndpointClient) Update() *EndpointUpdate {
	mutation := newEndpointMutation(c.config, OpUpdate)
	return &EndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EndpointClient) UpdateOne(e *Endpoint) *EndpointUpdateOne {
	mutation := newEndpointMutation(c.config, OpUpdateOne, withEndpoint(e))
	return &EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EndpointClient) UpdateOneID(id string) *EndpointUpdateOne {
	mutation := newEndpointMutation(c.config, OpUpdateOne, withEndpointID(id))
	return &EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Endpoint.
func (c *EndpointClient) Delete() *EndpointDelete {
	mutation := newEndpointMutation(c.config, OpDelete)
	return &EndpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EndpointClient) DeleteOne(e *Endpoint) *EndpointDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EndpointClient) DeleteOneID(id string) *EndpointDeleteOne {
	builder := c.Delete().Where(endpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EndpointDeleteOne{builder}
}

// Query returns a query builder for Endpoint.
func (c *EndpointClient) Query() *EndpointQuery {
	return &EndpointQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEndpoint},
		inters: c.Interceptors(),
	}
}

// Get returns a Endpoint entity by its id.
func (c *EndpointClient) Get(ctx context.Context, id string) (*Endpoint, error) {
	return c.Query().Where(endpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EndpointClient) GetX(ctx context.Context, id string) *Endpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkDevice queries the network_device edge of a Endpoint.
func (c *EndpointClient) QueryNetworkDevice(e *Endpoint) *NetworkDeviceQuery {
	query := (&NetworkDeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(endpoint.Table, endpoint.FieldID, id),
			sqlgraph.To(networkdevice.Table, networkdevice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, endpoint.NetworkDeviceTable, endpoint.NetworkDeviceColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EndpointClient) Hooks() []Hook {
	return c.hooks.Endpoint
}

// Interceptors returns the client interceptors.
func (c *EndpointClient) Interceptors() []Interceptor {
	return c.inters.Endpoint
}

func (c *EndpointClient) mutate(ctx context.Context, m *EndpointMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EndpointCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EndpointDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Endpoint mutation op: %q", m.Op())
	}
}

// NetworkDeviceClient is a client for the NetworkDevice schema.
type NetworkDeviceClient struct {
	config
}

// NewNetworkDeviceClient returns a client for the NetworkDevice from the given config.
func NewNetworkDeviceClient(c config) *NetworkDeviceClient {
	return &NetworkDeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networkdevice.Hooks(f(g(h())))`.
func (c *NetworkDeviceClient) Use(hooks ...Hook) {
	c.hooks.NetworkDevice = append(c.hooks.NetworkDevice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `networkdevice.Intercept(f(g(h())))`.
func (c *NetworkDeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetworkDevice = append(c.inters.NetworkDevice, interceptors...)
}

// Create returns a builder for creating a NetworkDevice entity.
func (c *NetworkDeviceClient) Create() *NetworkDeviceCreate {
	mutation := newNetworkDeviceMutation(c.config, OpCreate)
	return &NetworkDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkDevice entities.
func (c *NetworkDeviceClient) CreateBulk(builders ...*NetworkDeviceCreate) *NetworkDeviceCreateBulk {
	return &NetworkDeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NetworkDeviceClient) MapCreateBulk(slice any, setFunc func(*NetworkDeviceCreate, int)) *NetworkDeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NetworkDeviceCreateBulk{err: fmt.Errorf("calling to NetworkDeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NetworkDeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NetworkDeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkDevice.
func (c *NetworkDeviceClient) Update() *NetworkDeviceUpdate {
	mutation := newNetworkDeviceMutation(c.config, OpUpdate)
	return &NetworkDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkDeviceClient) UpdateOne(nd *NetworkDevice) *NetworkDeviceUpdateOne {
	mutation := newNetworkDeviceMutation(c.config, OpUpdateOne, withNetworkDevice(nd))
	return &NetworkDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkDeviceClient) UpdateOneID(id string) *NetworkDeviceUpdateOne {
	mutation := newNetworkDeviceMutation(c.config, OpUpdateOne, withNetworkDeviceID(id))
	return &NetworkDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkDevice.
func (c *NetworkDeviceClient) Delete() *NetworkDeviceDelete {
	mutation := newNetworkDeviceMutation(c.config, OpDelete)
	return &NetworkDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkDeviceClient) DeleteOne(nd *NetworkDevice) *NetworkDeviceDeleteOne {
	return c.DeleteOneID(nd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkDeviceClient) DeleteOneID(id string) *NetworkDeviceDeleteOne {
	builder := c.Delete().Where(networkdevice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkDeviceDeleteOne{builder}
}

// Query returns a query builder for NetworkDevice.
func (c *NetworkDeviceClient) Query() *NetworkDeviceQuery {
	return &NetworkDeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetworkDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a NetworkDevice entity by its id.
func (c *NetworkDeviceClient) Get(ctx context.Context, id string) (*NetworkDevice, error) {
	return c.Query().Where(networkdevice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkDeviceClient) GetX(ctx context.Context, id string) *NetworkDevice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEndpoints queries the endpoints edge of a NetworkDevice.
func (c *NetworkDeviceClient) QueryEndpoints(nd *NetworkDevice) *EndpointQuery {
	query := (&EndpointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, id),
			sqlgraph.To(endpoint.Table, endpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, networkdevice.EndpointsTable, networkdevice.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(nd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwVersion queries the sw_version edge of a NetworkDevice.
func (c *NetworkDeviceClient) QuerySwVersion(nd *NetworkDevice) *VersionQuery {
	query := (&VersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, id),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networkdevice.SwVersionTable, networkdevice.SwVersionColumn),
		)
		fromV = sqlgraph.Neighbors(nd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFwVersion queries the fw_version edge of a NetworkDevice.
func (c *NetworkDeviceClient) QueryFwVersion(nd *NetworkDevice) *VersionQuery {
	query := (&VersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, id),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networkdevice.FwVersionTable, networkdevice.FwVersionColumn),
		)
		fromV = sqlgraph.Neighbors(nd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkDeviceClient) Hooks() []Hook {
	return c.hooks.NetworkDevice
}

// Interceptors returns the client interceptors.
func (c *NetworkDeviceClient) Interceptors() []Interceptor {
	return c.inters.NetworkDevice
}

func (c *NetworkDeviceClient) mutate(ctx context.Context, m *NetworkDeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetworkDevice mutation op: %q", m.Op())
	}
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `version.Hooks(f(g(h())))`.
func (c *VersionClient) Use(hooks ...Hook) {
	c.hooks.Version = append(c.hooks.Version, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `version.Intercept(f(g(h())))`.
func (c *VersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Version = append(c.inters.Version, interceptors...)
}

// Create returns a builder for creating a Version entity.
func (c *VersionClient) Create() *VersionCreate {
	mutation := newVersionMutation(c.config, OpCreate)
	return &VersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Version entities.
func (c *VersionClient) CreateBulk(builders ...*VersionCreate) *VersionCreateBulk {
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VersionClient) MapCreateBulk(slice any, setFunc func(*VersionCreate, int)) *VersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VersionCreateBulk{err: fmt.Errorf("calling to VersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id string) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	mutation := newVersionMutation(c.config, OpDelete)
	return &VersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VersionClient) DeleteOneID(id string) *VersionDeleteOne {
	builder := c.Delete().Where(version.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionDeleteOne{builder}
}

// Query returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id string) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id string) *Version {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VersionClient) Hooks() []Hook {
	return c.hooks.Version
}

// Interceptors returns the client interceptors.
func (c *VersionClient) Interceptors() []Interceptor {
	return c.inters.Version
}

func (c *VersionClient) mutate(ctx context.Context, m *VersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Version mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DeviceStatus, Endpoint, NetworkDevice, Version []ent.Hook
	}
	inters struct {
		DeviceStatus, Endpoint, NetworkDevice, Version []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
