// Code generated by ent, DO NOT EDIT.

package networkdevice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldContainsFold(FieldID, id))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldModel, v))
}

// HwVersion applies equality check predicate on the "hw_version" field. It's identical to HwVersionEQ.
func HwVersion(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldHwVersion, v))
}

// VendorEQ applies the EQ predicate on the "vendor" field.
func VendorEQ(v Vendor) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldVendor, v))
}

// VendorNEQ applies the NEQ predicate on the "vendor" field.
func VendorNEQ(v Vendor) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNEQ(FieldVendor, v))
}

// VendorIn applies the In predicate on the "vendor" field.
func VendorIn(vs ...Vendor) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldIn(FieldVendor, vs...))
}

// VendorNotIn applies the NotIn predicate on the "vendor" field.
func VendorNotIn(vs ...Vendor) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNotIn(FieldVendor, vs...))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldContainsFold(FieldModel, v))
}

// HwVersionEQ applies the EQ predicate on the "hw_version" field.
func HwVersionEQ(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEQ(FieldHwVersion, v))
}

// HwVersionNEQ applies the NEQ predicate on the "hw_version" field.
func HwVersionNEQ(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNEQ(FieldHwVersion, v))
}

// HwVersionIn applies the In predicate on the "hw_version" field.
func HwVersionIn(vs ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldIn(FieldHwVersion, vs...))
}

// HwVersionNotIn applies the NotIn predicate on the "hw_version" field.
func HwVersionNotIn(vs ...string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldNotIn(FieldHwVersion, vs...))
}

// HwVersionGT applies the GT predicate on the "hw_version" field.
func HwVersionGT(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGT(FieldHwVersion, v))
}

// HwVersionGTE applies the GTE predicate on the "hw_version" field.
func HwVersionGTE(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldGTE(FieldHwVersion, v))
}

// HwVersionLT applies the LT predicate on the "hw_version" field.
func HwVersionLT(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLT(FieldHwVersion, v))
}

// HwVersionLTE applies the LTE predicate on the "hw_version" field.
func HwVersionLTE(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldLTE(FieldHwVersion, v))
}

// HwVersionContains applies the Contains predicate on the "hw_version" field.
func HwVersionContains(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldContains(FieldHwVersion, v))
}

// HwVersionHasPrefix applies the HasPrefix predicate on the "hw_version" field.
func HwVersionHasPrefix(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldHasPrefix(FieldHwVersion, v))
}

// HwVersionHasSuffix applies the HasSuffix predicate on the "hw_version" field.
func HwVersionHasSuffix(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldHasSuffix(FieldHwVersion, v))
}

// HwVersionEqualFold applies the EqualFold predicate on the "hw_version" field.
func HwVersionEqualFold(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldEqualFold(FieldHwVersion, v))
}

// HwVersionContainsFold applies the ContainsFold predicate on the "hw_version" field.
func HwVersionContainsFold(v string) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.FieldContainsFold(FieldHwVersion, v))
}

// HasEndpoint applies the HasEdge predicate on the "endpoint" edge.
func HasEndpoint() predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EndpointTable, EndpointPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEndpointWith applies the HasEdge predicate on the "endpoint" edge with a given conditions (other predicates).
func HasEndpointWith(preds ...predicate.Endpoint) predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := newEndpointStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSwVersion applies the HasEdge predicate on the "sw_version" edge.
func HasSwVersion() predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SwVersionTable, SwVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSwVersionWith applies the HasEdge predicate on the "sw_version" edge with a given conditions (other predicates).
func HasSwVersionWith(preds ...predicate.Version) predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := newSwVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFwVersion applies the HasEdge predicate on the "fw_version" edge.
func HasFwVersion() predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FwVersionTable, FwVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFwVersionWith applies the HasEdge predicate on the "fw_version" edge with a given conditions (other predicates).
func HasFwVersionWith(preds ...predicate.Version) predicate.NetworkDevice {
	return predicate.NetworkDevice(func(s *sql.Selector) {
		step := newFwVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetworkDevice) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetworkDevice) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetworkDevice) predicate.NetworkDevice {
	return predicate.NetworkDevice(sql.NotPredicates(p))
}
