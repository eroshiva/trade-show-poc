// Code generated by ent, DO NOT EDIT.

package networkdevice

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the networkdevice type in the database.
	Label = "network_device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVendor holds the string denoting the vendor field in the database.
	FieldVendor = "vendor"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldHwVersion holds the string denoting the hw_version field in the database.
	FieldHwVersion = "hw_version"
	// EdgeEndpoint holds the string denoting the endpoint edge name in mutations.
	EdgeEndpoint = "endpoint"
	// EdgeSwVersion holds the string denoting the sw_version edge name in mutations.
	EdgeSwVersion = "sw_version"
	// EdgeFwVersion holds the string denoting the fw_version edge name in mutations.
	EdgeFwVersion = "fw_version"
	// Table holds the table name of the networkdevice in the database.
	Table = "network_devices"
	// EndpointTable is the table that holds the endpoint relation/edge. The primary key declared below.
	EndpointTable = "network_device_endpoint"
	// EndpointInverseTable is the table name for the Endpoint entity.
	// It exists in this package in order to avoid circular dependency with the "endpoint" package.
	EndpointInverseTable = "endpoints"
	// SwVersionTable is the table that holds the sw_version relation/edge.
	SwVersionTable = "versions"
	// SwVersionInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	SwVersionInverseTable = "versions"
	// SwVersionColumn is the table column denoting the sw_version relation/edge.
	SwVersionColumn = "network_device_sw_version"
	// FwVersionTable is the table that holds the fw_version relation/edge.
	FwVersionTable = "versions"
	// FwVersionInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	FwVersionInverseTable = "versions"
	// FwVersionColumn is the table column denoting the fw_version relation/edge.
	FwVersionColumn = "network_device_fw_version"
)

// Columns holds all SQL columns for networkdevice fields.
var Columns = []string{
	FieldID,
	FieldVendor,
	FieldModel,
	FieldHwVersion,
}

var (
	// EndpointPrimaryKey and EndpointColumn2 are the table columns denoting the
	// primary key for the endpoint relation (M2M).
	EndpointPrimaryKey = []string{"network_device_id", "endpoint_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Vendor defines the type for the "vendor" enum field.
type Vendor string

// Vendor values.
const (
	VendorVENDOR_UNSPECIFIED Vendor = "VENDOR_UNSPECIFIED"
	VendorVENDOR_UBIQUITI    Vendor = "VENDOR_UBIQUITI"
	VendorVENDOR_CISCO       Vendor = "VENDOR_CISCO"
	VendorVENDOR_JUNIPER     Vendor = "VENDOR_JUNIPER"
)

func (v Vendor) String() string {
	return string(v)
}

// VendorValidator is a validator for the "vendor" field enum values. It is called by the builders before save.
func VendorValidator(v Vendor) error {
	switch v {
	case VendorVENDOR_UNSPECIFIED, VendorVENDOR_UBIQUITI, VendorVENDOR_CISCO, VendorVENDOR_JUNIPER:
		return nil
	default:
		return fmt.Errorf("networkdevice: invalid enum value for vendor field: %q", v)
	}
}

// OrderOption defines the ordering options for the NetworkDevice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVendor orders the results by the vendor field.
func ByVendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendor, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByHwVersion orders the results by the hw_version field.
func ByHwVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHwVersion, opts...).ToFunc()
}

// ByEndpointCount orders the results by endpoint count.
func ByEndpointCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEndpointStep(), opts...)
	}
}

// ByEndpoint orders the results by endpoint terms.
func ByEndpoint(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEndpointStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySwVersionCount orders the results by sw_version count.
func BySwVersionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSwVersionStep(), opts...)
	}
}

// BySwVersion orders the results by sw_version terms.
func BySwVersion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSwVersionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFwVersionCount orders the results by fw_version count.
func ByFwVersionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFwVersionStep(), opts...)
	}
}

// ByFwVersion orders the results by fw_version terms.
func ByFwVersion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFwVersionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEndpointStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EndpointInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EndpointTable, EndpointPrimaryKey...),
	)
}
func newSwVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SwVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SwVersionTable, SwVersionColumn),
	)
}
func newFwVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FwVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FwVersionTable, FwVersionColumn),
	)
}
