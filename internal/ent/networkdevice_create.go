// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eroshiva/trade-show-poc/internal/ent/endpoint"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/version"
)

// NetworkDeviceCreate is the builder for creating a NetworkDevice entity.
type NetworkDeviceCreate struct {
	config
	mutation *NetworkDeviceMutation
	hooks    []Hook
}

// SetVendor sets the "vendor" field.
func (ndc *NetworkDeviceCreate) SetVendor(n networkdevice.Vendor) *NetworkDeviceCreate {
	ndc.mutation.SetVendor(n)
	return ndc
}

// SetModel sets the "model" field.
func (ndc *NetworkDeviceCreate) SetModel(s string) *NetworkDeviceCreate {
	ndc.mutation.SetModel(s)
	return ndc
}

// SetHwVersion sets the "hw_version" field.
func (ndc *NetworkDeviceCreate) SetHwVersion(s string) *NetworkDeviceCreate {
	ndc.mutation.SetHwVersion(s)
	return ndc
}

// SetID sets the "id" field.
func (ndc *NetworkDeviceCreate) SetID(s string) *NetworkDeviceCreate {
	ndc.mutation.SetID(s)
	return ndc
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (ndc *NetworkDeviceCreate) AddEndpointIDs(ids ...int) *NetworkDeviceCreate {
	ndc.mutation.AddEndpointIDs(ids...)
	return ndc
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (ndc *NetworkDeviceCreate) AddEndpoints(e ...*Endpoint) *NetworkDeviceCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ndc.AddEndpointIDs(ids...)
}

// AddSwVersionIDs adds the "sw_version" edge to the Version entity by IDs.
func (ndc *NetworkDeviceCreate) AddSwVersionIDs(ids ...int) *NetworkDeviceCreate {
	ndc.mutation.AddSwVersionIDs(ids...)
	return ndc
}

// AddSwVersion adds the "sw_version" edges to the Version entity.
func (ndc *NetworkDeviceCreate) AddSwVersion(v ...*Version) *NetworkDeviceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndc.AddSwVersionIDs(ids...)
}

// AddFwVersionIDs adds the "fw_version" edge to the Version entity by IDs.
func (ndc *NetworkDeviceCreate) AddFwVersionIDs(ids ...int) *NetworkDeviceCreate {
	ndc.mutation.AddFwVersionIDs(ids...)
	return ndc
}

// AddFwVersion adds the "fw_version" edges to the Version entity.
func (ndc *NetworkDeviceCreate) AddFwVersion(v ...*Version) *NetworkDeviceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ndc.AddFwVersionIDs(ids...)
}

// Mutation returns the NetworkDeviceMutation object of the builder.
func (ndc *NetworkDeviceCreate) Mutation() *NetworkDeviceMutation {
	return ndc.mutation
}

// Save creates the NetworkDevice in the database.
func (ndc *NetworkDeviceCreate) Save(ctx context.Context) (*NetworkDevice, error) {
	return withHooks(ctx, ndc.sqlSave, ndc.mutation, ndc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ndc *NetworkDeviceCreate) SaveX(ctx context.Context) *NetworkDevice {
	v, err := ndc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ndc *NetworkDeviceCreate) Exec(ctx context.Context) error {
	_, err := ndc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndc *NetworkDeviceCreate) ExecX(ctx context.Context) {
	if err := ndc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ndc *NetworkDeviceCreate) check() error {
	if _, ok := ndc.mutation.Vendor(); !ok {
		return &ValidationError{Name: "vendor", err: errors.New(`ent: missing required field "NetworkDevice.vendor"`)}
	}
	if v, ok := ndc.mutation.Vendor(); ok {
		if err := networkdevice.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`ent: validator failed for field "NetworkDevice.vendor": %w`, err)}
		}
	}
	if _, ok := ndc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "NetworkDevice.model"`)}
	}
	if _, ok := ndc.mutation.HwVersion(); !ok {
		return &ValidationError{Name: "hw_version", err: errors.New(`ent: missing required field "NetworkDevice.hw_version"`)}
	}
	return nil
}

func (ndc *NetworkDeviceCreate) sqlSave(ctx context.Context) (*NetworkDevice, error) {
	if err := ndc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ndc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ndc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NetworkDevice.ID type: %T", _spec.ID.Value)
		}
	}
	ndc.mutation.id = &_node.ID
	ndc.mutation.done = true
	return _node, nil
}

func (ndc *NetworkDeviceCreate) createSpec() (*NetworkDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &NetworkDevice{config: ndc.config}
		_spec = sqlgraph.NewCreateSpec(networkdevice.Table, sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString))
	)
	if id, ok := ndc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ndc.mutation.Vendor(); ok {
		_spec.SetField(networkdevice.FieldVendor, field.TypeEnum, value)
		_node.Vendor = value
	}
	if value, ok := ndc.mutation.Model(); ok {
		_spec.SetField(networkdevice.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := ndc.mutation.HwVersion(); ok {
		_spec.SetField(networkdevice.FieldHwVersion, field.TypeString, value)
		_node.HwVersion = value
	}
	if nodes := ndc.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.EndpointsTable,
			Columns: []string{networkdevice.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ndc.mutation.SwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.SwVersionTable,
			Columns: []string{networkdevice.SwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ndc.mutation.FwVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkdevice.FwVersionTable,
			Columns: []string{networkdevice.FwVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetworkDeviceCreateBulk is the builder for creating many NetworkDevice entities in bulk.
type NetworkDeviceCreateBulk struct {
	config
	err      error
	builders []*NetworkDeviceCreate
}

// Save creates the NetworkDevice entities in the database.
func (ndcb *NetworkDeviceCreateBulk) Save(ctx context.Context) ([]*NetworkDevice, error) {
	if ndcb.err != nil {
		return nil, ndcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ndcb.builders))
	nodes := make([]*NetworkDevice, len(ndcb.builders))
	mutators := make([]Mutator, len(ndcb.builders))
	for i := range ndcb.builders {
		func(i int, root context.Context) {
			builder := ndcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ndcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ndcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ndcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ndcb *NetworkDeviceCreateBulk) SaveX(ctx context.Context) []*NetworkDevice {
	v, err := ndcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ndcb *NetworkDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := ndcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndcb *NetworkDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := ndcb.Exec(ctx); err != nil {
		panic(err)
	}
}
