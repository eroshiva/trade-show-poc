// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eroshiva/trade-show-poc/internal/ent/endpoint"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
)

// Endpoint is the model entity for the Endpoint schema.
type Endpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Port holds the value of the "port" field.
	Port string `json:"port,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol endpoint.Protocol `json:"protocol,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndpointQuery when eager-loading is set.
	Edges                    EndpointEdges `json:"edges"`
	network_device_endpoints *string
	selectValues             sql.SelectValues
}

// EndpointEdges holds the relations/edges for other nodes in the graph.
type EndpointEdges struct {
	// NetworkDevice holds the value of the network_device edge.
	NetworkDevice *NetworkDevice `json:"network_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NetworkDeviceOrErr returns the NetworkDevice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EndpointEdges) NetworkDeviceOrErr() (*NetworkDevice, error) {
	if e.NetworkDevice != nil {
		return e.NetworkDevice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: networkdevice.Label}
	}
	return nil, &NotLoadedError{edge: "network_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endpoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case endpoint.FieldHost, endpoint.FieldPort, endpoint.FieldProtocol:
			values[i] = new(sql.NullString)
		case endpoint.ForeignKeys[0]: // network_device_endpoints
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endpoint fields.
func (e *Endpoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case endpoint.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				e.Host = value.String
			}
		case endpoint.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				e.Port = value.String
			}
		case endpoint.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				e.Protocol = endpoint.Protocol(value.String)
			}
		case endpoint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_device_endpoints", values[i])
			} else if value.Valid {
				e.network_device_endpoints = new(string)
				*e.network_device_endpoints = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Endpoint.
// This includes values selected through modifiers, order, etc.
func (e *Endpoint) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryNetworkDevice queries the "network_device" edge of the Endpoint entity.
func (e *Endpoint) QueryNetworkDevice() *NetworkDeviceQuery {
	return NewEndpointClient(e.config).QueryNetworkDevice(e)
}

// Update returns a builder for updating this Endpoint.
// Note that you need to call Endpoint.Unwrap() before calling this method if this Endpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endpoint) Update() *EndpointUpdateOne {
	return NewEndpointClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Endpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endpoint) Unwrap() *Endpoint {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Endpoint is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Endpoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("host=")
	builder.WriteString(e.Host)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(e.Port)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(fmt.Sprintf("%v", e.Protocol))
	builder.WriteByte(')')
	return builder.String()
}

// Endpoints is a parsable slice of Endpoint.
type Endpoints []*Endpoint
