// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// NetworkDeviceDelete is the builder for deleting a NetworkDevice entity.
type NetworkDeviceDelete struct {
	config
	hooks    []Hook
	mutation *NetworkDeviceMutation
}

// Where appends a list predicates to the NetworkDeviceDelete builder.
func (ndd *NetworkDeviceDelete) Where(ps ...predicate.NetworkDevice) *NetworkDeviceDelete {
	ndd.mutation.Where(ps...)
	return ndd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ndd *NetworkDeviceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ndd.sqlExec, ndd.mutation, ndd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ndd *NetworkDeviceDelete) ExecX(ctx context.Context) int {
	n, err := ndd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ndd *NetworkDeviceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(networkdevice.Table, sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString))
	if ps := ndd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ndd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ndd.mutation.done = true
	return affected, err
}

// NetworkDeviceDeleteOne is the builder for deleting a single NetworkDevice entity.
type NetworkDeviceDeleteOne struct {
	ndd *NetworkDeviceDelete
}

// Where appends a list predicates to the NetworkDeviceDelete builder.
func (nddo *NetworkDeviceDeleteOne) Where(ps ...predicate.NetworkDevice) *NetworkDeviceDeleteOne {
	nddo.ndd.mutation.Where(ps...)
	return nddo
}

// Exec executes the deletion query.
func (nddo *NetworkDeviceDeleteOne) Exec(ctx context.Context) error {
	n, err := nddo.ndd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{networkdevice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nddo *NetworkDeviceDeleteOne) ExecX(ctx context.Context) {
	if err := nddo.Exec(ctx); err != nil {
		panic(err)
	}
}
