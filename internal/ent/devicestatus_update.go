// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eroshiva/trade-show-poc/internal/ent/devicestatus"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// DeviceStatusUpdate is the builder for updating DeviceStatus entities.
type DeviceStatusUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceStatusMutation
}

// Where appends a list predicates to the DeviceStatusUpdate builder.
func (dsu *DeviceStatusUpdate) Where(ps ...predicate.DeviceStatus) *DeviceStatusUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetStatus sets the "status" field.
func (dsu *DeviceStatusUpdate) SetStatus(d devicestatus.Status) *DeviceStatusUpdate {
	dsu.mutation.SetStatus(d)
	return dsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dsu *DeviceStatusUpdate) SetNillableStatus(d *devicestatus.Status) *DeviceStatusUpdate {
	if d != nil {
		dsu.SetStatus(*d)
	}
	return dsu
}

// SetLastSeen sets the "last_seen" field.
func (dsu *DeviceStatusUpdate) SetLastSeen(s string) *DeviceStatusUpdate {
	dsu.mutation.SetLastSeen(s)
	return dsu
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (dsu *DeviceStatusUpdate) SetNillableLastSeen(s *string) *DeviceStatusUpdate {
	if s != nil {
		dsu.SetLastSeen(*s)
	}
	return dsu
}

// ClearLastSeen clears the value of the "last_seen" field.
func (dsu *DeviceStatusUpdate) ClearLastSeen() *DeviceStatusUpdate {
	dsu.mutation.ClearLastSeen()
	return dsu
}

// SetNetworkDeviceID sets the "network_device" edge to the NetworkDevice entity by ID.
func (dsu *DeviceStatusUpdate) SetNetworkDeviceID(id string) *DeviceStatusUpdate {
	dsu.mutation.SetNetworkDeviceID(id)
	return dsu
}

// SetNillableNetworkDeviceID sets the "network_device" edge to the NetworkDevice entity by ID if the given value is not nil.
func (dsu *DeviceStatusUpdate) SetNillableNetworkDeviceID(id *string) *DeviceStatusUpdate {
	if id != nil {
		dsu = dsu.SetNetworkDeviceID(*id)
	}
	return dsu
}

// SetNetworkDevice sets the "network_device" edge to the NetworkDevice entity.
func (dsu *DeviceStatusUpdate) SetNetworkDevice(n *NetworkDevice) *DeviceStatusUpdate {
	return dsu.SetNetworkDeviceID(n.ID)
}

// Mutation returns the DeviceStatusMutation object of the builder.
func (dsu *DeviceStatusUpdate) Mutation() *DeviceStatusMutation {
	return dsu.mutation
}

// ClearNetworkDevice clears the "network_device" edge to the NetworkDevice entity.
func (dsu *DeviceStatusUpdate) ClearNetworkDevice() *DeviceStatusUpdate {
	dsu.mutation.ClearNetworkDevice()
	return dsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DeviceStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dsu.sqlSave, dsu.mutation, dsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DeviceStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DeviceStatusUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DeviceStatusUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DeviceStatusUpdate) check() error {
	if v, ok := dsu.mutation.Status(); ok {
		if err := devicestatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DeviceStatus.status": %w`, err)}
		}
	}
	return nil
}

func (dsu *DeviceStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicestatus.Table, devicestatus.Columns, sqlgraph.NewFieldSpec(devicestatus.FieldID, field.TypeString))
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.Status(); ok {
		_spec.SetField(devicestatus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dsu.mutation.LastSeen(); ok {
		_spec.SetField(devicestatus.FieldLastSeen, field.TypeString, value)
	}
	if dsu.mutation.LastSeenCleared() {
		_spec.ClearField(devicestatus.FieldLastSeen, field.TypeString)
	}
	if dsu.mutation.NetworkDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicestatus.NetworkDeviceTable,
			Columns: []string{devicestatus.NetworkDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.NetworkDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicestatus.NetworkDeviceTable,
			Columns: []string{devicestatus.NetworkDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dsu.mutation.done = true
	return n, nil
}

// DeviceStatusUpdateOne is the builder for updating a single DeviceStatus entity.
type DeviceStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceStatusMutation
}

// SetStatus sets the "status" field.
func (dsuo *DeviceStatusUpdateOne) SetStatus(d devicestatus.Status) *DeviceStatusUpdateOne {
	dsuo.mutation.SetStatus(d)
	return dsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dsuo *DeviceStatusUpdateOne) SetNillableStatus(d *devicestatus.Status) *DeviceStatusUpdateOne {
	if d != nil {
		dsuo.SetStatus(*d)
	}
	return dsuo
}

// SetLastSeen sets the "last_seen" field.
func (dsuo *DeviceStatusUpdateOne) SetLastSeen(s string) *DeviceStatusUpdateOne {
	dsuo.mutation.SetLastSeen(s)
	return dsuo
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (dsuo *DeviceStatusUpdateOne) SetNillableLastSeen(s *string) *DeviceStatusUpdateOne {
	if s != nil {
		dsuo.SetLastSeen(*s)
	}
	return dsuo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (dsuo *DeviceStatusUpdateOne) ClearLastSeen() *DeviceStatusUpdateOne {
	dsuo.mutation.ClearLastSeen()
	return dsuo
}

// SetNetworkDeviceID sets the "network_device" edge to the NetworkDevice entity by ID.
func (dsuo *DeviceStatusUpdateOne) SetNetworkDeviceID(id string) *DeviceStatusUpdateOne {
	dsuo.mutation.SetNetworkDeviceID(id)
	return dsuo
}

// SetNillableNetworkDeviceID sets the "network_device" edge to the NetworkDevice entity by ID if the given value is not nil.
func (dsuo *DeviceStatusUpdateOne) SetNillableNetworkDeviceID(id *string) *DeviceStatusUpdateOne {
	if id != nil {
		dsuo = dsuo.SetNetworkDeviceID(*id)
	}
	return dsuo
}

// SetNetworkDevice sets the "network_device" edge to the NetworkDevice entity.
func (dsuo *DeviceStatusUpdateOne) SetNetworkDevice(n *NetworkDevice) *DeviceStatusUpdateOne {
	return dsuo.SetNetworkDeviceID(n.ID)
}

// Mutation returns the DeviceStatusMutation object of the builder.
func (dsuo *DeviceStatusUpdateOne) Mutation() *DeviceStatusMutation {
	return dsuo.mutation
}

// ClearNetworkDevice clears the "network_device" edge to the NetworkDevice entity.
func (dsuo *DeviceStatusUpdateOne) ClearNetworkDevice() *DeviceStatusUpdateOne {
	dsuo.mutation.ClearNetworkDevice()
	return dsuo
}

// Where appends a list predicates to the DeviceStatusUpdate builder.
func (dsuo *DeviceStatusUpdateOne) Where(ps ...predicate.DeviceStatus) *DeviceStatusUpdateOne {
	dsuo.mutation.Where(ps...)
	return dsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DeviceStatusUpdateOne) Select(field string, fields ...string) *DeviceStatusUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DeviceStatus entity.
func (dsuo *DeviceStatusUpdateOne) Save(ctx context.Context) (*DeviceStatus, error) {
	return withHooks(ctx, dsuo.sqlSave, dsuo.mutation, dsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DeviceStatusUpdateOne) SaveX(ctx context.Context) *DeviceStatus {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DeviceStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DeviceStatusUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DeviceStatusUpdateOne) check() error {
	if v, ok := dsuo.mutation.Status(); ok {
		if err := devicestatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DeviceStatus.status": %w`, err)}
		}
	}
	return nil
}

func (dsuo *DeviceStatusUpdateOne) sqlSave(ctx context.Context) (_node *DeviceStatus, err error) {
	if err := dsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicestatus.Table, devicestatus.Columns, sqlgraph.NewFieldSpec(devicestatus.FieldID, field.TypeString))
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicestatus.FieldID)
		for _, f := range fields {
			if !devicestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.Status(); ok {
		_spec.SetField(devicestatus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dsuo.mutation.LastSeen(); ok {
		_spec.SetField(devicestatus.FieldLastSeen, field.TypeString, value)
	}
	if dsuo.mutation.LastSeenCleared() {
		_spec.ClearField(devicestatus.FieldLastSeen, field.TypeString)
	}
	if dsuo.mutation.NetworkDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicestatus.NetworkDeviceTable,
			Columns: []string{devicestatus.NetworkDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.NetworkDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   devicestatus.NetworkDeviceTable,
			Columns: []string{devicestatus.NetworkDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeviceStatus{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dsuo.mutation.done = true
	return _node, nil
}
