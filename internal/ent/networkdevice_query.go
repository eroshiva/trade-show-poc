// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eroshiva/trade-show-poc/internal/ent/endpoint"
	"github.com/eroshiva/trade-show-poc/internal/ent/networkdevice"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
	"github.com/eroshiva/trade-show-poc/internal/ent/version"
)

// NetworkDeviceQuery is the builder for querying NetworkDevice entities.
type NetworkDeviceQuery struct {
	config
	ctx           *QueryContext
	order         []networkdevice.OrderOption
	inters        []Interceptor
	predicates    []predicate.NetworkDevice
	withEndpoint  *EndpointQuery
	withSwVersion *VersionQuery
	withFwVersion *VersionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetworkDeviceQuery builder.
func (ndq *NetworkDeviceQuery) Where(ps ...predicate.NetworkDevice) *NetworkDeviceQuery {
	ndq.predicates = append(ndq.predicates, ps...)
	return ndq
}

// Limit the number of records to be returned by this query.
func (ndq *NetworkDeviceQuery) Limit(limit int) *NetworkDeviceQuery {
	ndq.ctx.Limit = &limit
	return ndq
}

// Offset to start from.
func (ndq *NetworkDeviceQuery) Offset(offset int) *NetworkDeviceQuery {
	ndq.ctx.Offset = &offset
	return ndq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ndq *NetworkDeviceQuery) Unique(unique bool) *NetworkDeviceQuery {
	ndq.ctx.Unique = &unique
	return ndq
}

// Order specifies how the records should be ordered.
func (ndq *NetworkDeviceQuery) Order(o ...networkdevice.OrderOption) *NetworkDeviceQuery {
	ndq.order = append(ndq.order, o...)
	return ndq
}

// QueryEndpoint chains the current query on the "endpoint" edge.
func (ndq *NetworkDeviceQuery) QueryEndpoint() *EndpointQuery {
	query := (&EndpointClient{config: ndq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ndq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ndq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, selector),
			sqlgraph.To(endpoint.Table, endpoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, networkdevice.EndpointTable, networkdevice.EndpointPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ndq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwVersion chains the current query on the "sw_version" edge.
func (ndq *NetworkDeviceQuery) QuerySwVersion() *VersionQuery {
	query := (&VersionClient{config: ndq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ndq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ndq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, selector),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, networkdevice.SwVersionTable, networkdevice.SwVersionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ndq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFwVersion chains the current query on the "fw_version" edge.
func (ndq *NetworkDeviceQuery) QueryFwVersion() *VersionQuery {
	query := (&VersionClient{config: ndq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ndq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ndq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networkdevice.Table, networkdevice.FieldID, selector),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, networkdevice.FwVersionTable, networkdevice.FwVersionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ndq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NetworkDevice entity from the query.
// Returns a *NotFoundError when no NetworkDevice was found.
func (ndq *NetworkDeviceQuery) First(ctx context.Context) (*NetworkDevice, error) {
	nodes, err := ndq.Limit(1).All(setContextOp(ctx, ndq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{networkdevice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) FirstX(ctx context.Context) *NetworkDevice {
	node, err := ndq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NetworkDevice ID from the query.
// Returns a *NotFoundError when no NetworkDevice ID was found.
func (ndq *NetworkDeviceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ndq.Limit(1).IDs(setContextOp(ctx, ndq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{networkdevice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) FirstIDX(ctx context.Context) string {
	id, err := ndq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NetworkDevice entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NetworkDevice entity is found.
// Returns a *NotFoundError when no NetworkDevice entities are found.
func (ndq *NetworkDeviceQuery) Only(ctx context.Context) (*NetworkDevice, error) {
	nodes, err := ndq.Limit(2).All(setContextOp(ctx, ndq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{networkdevice.Label}
	default:
		return nil, &NotSingularError{networkdevice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) OnlyX(ctx context.Context) *NetworkDevice {
	node, err := ndq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NetworkDevice ID in the query.
// Returns a *NotSingularError when more than one NetworkDevice ID is found.
// Returns a *NotFoundError when no entities are found.
func (ndq *NetworkDeviceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ndq.Limit(2).IDs(setContextOp(ctx, ndq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{networkdevice.Label}
	default:
		err = &NotSingularError{networkdevice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) OnlyIDX(ctx context.Context) string {
	id, err := ndq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NetworkDevices.
func (ndq *NetworkDeviceQuery) All(ctx context.Context) ([]*NetworkDevice, error) {
	ctx = setContextOp(ctx, ndq.ctx, ent.OpQueryAll)
	if err := ndq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NetworkDevice, *NetworkDeviceQuery]()
	return withInterceptors[[]*NetworkDevice](ctx, ndq, qr, ndq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) AllX(ctx context.Context) []*NetworkDevice {
	nodes, err := ndq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NetworkDevice IDs.
func (ndq *NetworkDeviceQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ndq.ctx.Unique == nil && ndq.path != nil {
		ndq.Unique(true)
	}
	ctx = setContextOp(ctx, ndq.ctx, ent.OpQueryIDs)
	if err = ndq.Select(networkdevice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) IDsX(ctx context.Context) []string {
	ids, err := ndq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ndq *NetworkDeviceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ndq.ctx, ent.OpQueryCount)
	if err := ndq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ndq, querierCount[*NetworkDeviceQuery](), ndq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) CountX(ctx context.Context) int {
	count, err := ndq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ndq *NetworkDeviceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ndq.ctx, ent.OpQueryExist)
	switch _, err := ndq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ndq *NetworkDeviceQuery) ExistX(ctx context.Context) bool {
	exist, err := ndq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetworkDeviceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ndq *NetworkDeviceQuery) Clone() *NetworkDeviceQuery {
	if ndq == nil {
		return nil
	}
	return &NetworkDeviceQuery{
		config:        ndq.config,
		ctx:           ndq.ctx.Clone(),
		order:         append([]networkdevice.OrderOption{}, ndq.order...),
		inters:        append([]Interceptor{}, ndq.inters...),
		predicates:    append([]predicate.NetworkDevice{}, ndq.predicates...),
		withEndpoint:  ndq.withEndpoint.Clone(),
		withSwVersion: ndq.withSwVersion.Clone(),
		withFwVersion: ndq.withFwVersion.Clone(),
		// clone intermediate query.
		sql:  ndq.sql.Clone(),
		path: ndq.path,
	}
}

// WithEndpoint tells the query-builder to eager-load the nodes that are connected to
// the "endpoint" edge. The optional arguments are used to configure the query builder of the edge.
func (ndq *NetworkDeviceQuery) WithEndpoint(opts ...func(*EndpointQuery)) *NetworkDeviceQuery {
	query := (&EndpointClient{config: ndq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ndq.withEndpoint = query
	return ndq
}

// WithSwVersion tells the query-builder to eager-load the nodes that are connected to
// the "sw_version" edge. The optional arguments are used to configure the query builder of the edge.
func (ndq *NetworkDeviceQuery) WithSwVersion(opts ...func(*VersionQuery)) *NetworkDeviceQuery {
	query := (&VersionClient{config: ndq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ndq.withSwVersion = query
	return ndq
}

// WithFwVersion tells the query-builder to eager-load the nodes that are connected to
// the "fw_version" edge. The optional arguments are used to configure the query builder of the edge.
func (ndq *NetworkDeviceQuery) WithFwVersion(opts ...func(*VersionQuery)) *NetworkDeviceQuery {
	query := (&VersionClient{config: ndq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ndq.withFwVersion = query
	return ndq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Vendor networkdevice.Vendor `json:"vendor,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NetworkDevice.Query().
//		GroupBy(networkdevice.FieldVendor).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ndq *NetworkDeviceQuery) GroupBy(field string, fields ...string) *NetworkDeviceGroupBy {
	ndq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NetworkDeviceGroupBy{build: ndq}
	grbuild.flds = &ndq.ctx.Fields
	grbuild.label = networkdevice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Vendor networkdevice.Vendor `json:"vendor,omitempty"`
//	}
//
//	client.NetworkDevice.Query().
//		Select(networkdevice.FieldVendor).
//		Scan(ctx, &v)
func (ndq *NetworkDeviceQuery) Select(fields ...string) *NetworkDeviceSelect {
	ndq.ctx.Fields = append(ndq.ctx.Fields, fields...)
	sbuild := &NetworkDeviceSelect{NetworkDeviceQuery: ndq}
	sbuild.label = networkdevice.Label
	sbuild.flds, sbuild.scan = &ndq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NetworkDeviceSelect configured with the given aggregations.
func (ndq *NetworkDeviceQuery) Aggregate(fns ...AggregateFunc) *NetworkDeviceSelect {
	return ndq.Select().Aggregate(fns...)
}

func (ndq *NetworkDeviceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ndq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ndq); err != nil {
				return err
			}
		}
	}
	for _, f := range ndq.ctx.Fields {
		if !networkdevice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ndq.path != nil {
		prev, err := ndq.path(ctx)
		if err != nil {
			return err
		}
		ndq.sql = prev
	}
	return nil
}

func (ndq *NetworkDeviceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NetworkDevice, error) {
	var (
		nodes       = []*NetworkDevice{}
		_spec       = ndq.querySpec()
		loadedTypes = [3]bool{
			ndq.withEndpoint != nil,
			ndq.withSwVersion != nil,
			ndq.withFwVersion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NetworkDevice).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NetworkDevice{config: ndq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ndq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ndq.withEndpoint; query != nil {
		if err := ndq.loadEndpoint(ctx, query, nodes,
			func(n *NetworkDevice) { n.Edges.Endpoint = []*Endpoint{} },
			func(n *NetworkDevice, e *Endpoint) { n.Edges.Endpoint = append(n.Edges.Endpoint, e) }); err != nil {
			return nil, err
		}
	}
	if query := ndq.withSwVersion; query != nil {
		if err := ndq.loadSwVersion(ctx, query, nodes,
			func(n *NetworkDevice) { n.Edges.SwVersion = []*Version{} },
			func(n *NetworkDevice, e *Version) { n.Edges.SwVersion = append(n.Edges.SwVersion, e) }); err != nil {
			return nil, err
		}
	}
	if query := ndq.withFwVersion; query != nil {
		if err := ndq.loadFwVersion(ctx, query, nodes,
			func(n *NetworkDevice) { n.Edges.FwVersion = []*Version{} },
			func(n *NetworkDevice, e *Version) { n.Edges.FwVersion = append(n.Edges.FwVersion, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ndq *NetworkDeviceQuery) loadEndpoint(ctx context.Context, query *EndpointQuery, nodes []*NetworkDevice, init func(*NetworkDevice), assign func(*NetworkDevice, *Endpoint)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*NetworkDevice)
	nids := make(map[int]map[*NetworkDevice]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(networkdevice.EndpointTable)
		s.Join(joinT).On(s.C(endpoint.FieldID), joinT.C(networkdevice.EndpointPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(networkdevice.EndpointPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(networkdevice.EndpointPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*NetworkDevice]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Endpoint](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "endpoint" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ndq *NetworkDeviceQuery) loadSwVersion(ctx context.Context, query *VersionQuery, nodes []*NetworkDevice, init func(*NetworkDevice), assign func(*NetworkDevice, *Version)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*NetworkDevice)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Version(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(networkdevice.SwVersionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.network_device_sw_version
		if fk == nil {
			return fmt.Errorf(`foreign-key "network_device_sw_version" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "network_device_sw_version" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ndq *NetworkDeviceQuery) loadFwVersion(ctx context.Context, query *VersionQuery, nodes []*NetworkDevice, init func(*NetworkDevice), assign func(*NetworkDevice, *Version)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*NetworkDevice)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Version(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(networkdevice.FwVersionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.network_device_fw_version
		if fk == nil {
			return fmt.Errorf(`foreign-key "network_device_fw_version" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "network_device_fw_version" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ndq *NetworkDeviceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ndq.querySpec()
	_spec.Node.Columns = ndq.ctx.Fields
	if len(ndq.ctx.Fields) > 0 {
		_spec.Unique = ndq.ctx.Unique != nil && *ndq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ndq.driver, _spec)
}

func (ndq *NetworkDeviceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(networkdevice.Table, networkdevice.Columns, sqlgraph.NewFieldSpec(networkdevice.FieldID, field.TypeString))
	_spec.From = ndq.sql
	if unique := ndq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ndq.path != nil {
		_spec.Unique = true
	}
	if fields := ndq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networkdevice.FieldID)
		for i := range fields {
			if fields[i] != networkdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ndq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ndq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ndq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ndq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ndq *NetworkDeviceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ndq.driver.Dialect())
	t1 := builder.Table(networkdevice.Table)
	columns := ndq.ctx.Fields
	if len(columns) == 0 {
		columns = networkdevice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ndq.sql != nil {
		selector = ndq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ndq.ctx.Unique != nil && *ndq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ndq.predicates {
		p(selector)
	}
	for _, p := range ndq.order {
		p(selector)
	}
	if offset := ndq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ndq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetworkDeviceGroupBy is the group-by builder for NetworkDevice entities.
type NetworkDeviceGroupBy struct {
	selector
	build *NetworkDeviceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ndgb *NetworkDeviceGroupBy) Aggregate(fns ...AggregateFunc) *NetworkDeviceGroupBy {
	ndgb.fns = append(ndgb.fns, fns...)
	return ndgb
}

// Scan applies the selector query and scans the result into the given value.
func (ndgb *NetworkDeviceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ndgb.build.ctx, ent.OpQueryGroupBy)
	if err := ndgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkDeviceQuery, *NetworkDeviceGroupBy](ctx, ndgb.build, ndgb, ndgb.build.inters, v)
}

func (ndgb *NetworkDeviceGroupBy) sqlScan(ctx context.Context, root *NetworkDeviceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ndgb.fns))
	for _, fn := range ndgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ndgb.flds)+len(ndgb.fns))
		for _, f := range *ndgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ndgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ndgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NetworkDeviceSelect is the builder for selecting fields of NetworkDevice entities.
type NetworkDeviceSelect struct {
	*NetworkDeviceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nds *NetworkDeviceSelect) Aggregate(fns ...AggregateFunc) *NetworkDeviceSelect {
	nds.fns = append(nds.fns, fns...)
	return nds
}

// Scan applies the selector query and scans the result into the given value.
func (nds *NetworkDeviceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nds.ctx, ent.OpQuerySelect)
	if err := nds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkDeviceQuery, *NetworkDeviceSelect](ctx, nds.NetworkDeviceQuery, nds, nds.inters, v)
}

func (nds *NetworkDeviceSelect) sqlScan(ctx context.Context, root *NetworkDeviceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nds.fns))
	for _, fn := range nds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
