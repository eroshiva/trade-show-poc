// Code generated by ent, DO NOT EDIT.

package version

import (
	"entgo.io/ent/dialect/sql"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// Checksum applies equality check predicate on the "checksum" field. It's identical to ChecksumEQ.
func Checksum(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChecksum, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldVersion, v))
}

// ChecksumEQ applies the EQ predicate on the "checksum" field.
func ChecksumEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChecksum, v))
}

// ChecksumNEQ applies the NEQ predicate on the "checksum" field.
func ChecksumNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldChecksum, v))
}

// ChecksumIn applies the In predicate on the "checksum" field.
func ChecksumIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldChecksum, vs...))
}

// ChecksumNotIn applies the NotIn predicate on the "checksum" field.
func ChecksumNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldChecksum, vs...))
}

// ChecksumGT applies the GT predicate on the "checksum" field.
func ChecksumGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldChecksum, v))
}

// ChecksumGTE applies the GTE predicate on the "checksum" field.
func ChecksumGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldChecksum, v))
}

// ChecksumLT applies the LT predicate on the "checksum" field.
func ChecksumLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldChecksum, v))
}

// ChecksumLTE applies the LTE predicate on the "checksum" field.
func ChecksumLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldChecksum, v))
}

// ChecksumContains applies the Contains predicate on the "checksum" field.
func ChecksumContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldChecksum, v))
}

// ChecksumHasPrefix applies the HasPrefix predicate on the "checksum" field.
func ChecksumHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldChecksum, v))
}

// ChecksumHasSuffix applies the HasSuffix predicate on the "checksum" field.
func ChecksumHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldChecksum, v))
}

// ChecksumEqualFold applies the EqualFold predicate on the "checksum" field.
func ChecksumEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldChecksum, v))
}

// ChecksumContainsFold applies the ContainsFold predicate on the "checksum" field.
func ChecksumContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldChecksum, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(sql.NotPredicates(p))
}
