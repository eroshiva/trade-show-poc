// Code generated by ent, DO NOT EDIT.

package devicestatus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eroshiva/trade-show-poc/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldContainsFold(FieldID, id))
}

// LastSeen applies equality check predicate on the "last_seen" field. It's identical to LastSeenEQ.
func LastSeen(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldLastSeen, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldStatus, vs...))
}

// LastSeenEQ applies the EQ predicate on the "last_seen" field.
func LastSeenEQ(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldLastSeen, v))
}

// LastSeenNEQ applies the NEQ predicate on the "last_seen" field.
func LastSeenNEQ(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldLastSeen, v))
}

// LastSeenIn applies the In predicate on the "last_seen" field.
func LastSeenIn(vs ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldLastSeen, vs...))
}

// LastSeenNotIn applies the NotIn predicate on the "last_seen" field.
func LastSeenNotIn(vs ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldLastSeen, vs...))
}

// LastSeenGT applies the GT predicate on the "last_seen" field.
func LastSeenGT(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldLastSeen, v))
}

// LastSeenGTE applies the GTE predicate on the "last_seen" field.
func LastSeenGTE(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldLastSeen, v))
}

// LastSeenLT applies the LT predicate on the "last_seen" field.
func LastSeenLT(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldLastSeen, v))
}

// LastSeenLTE applies the LTE predicate on the "last_seen" field.
func LastSeenLTE(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldLastSeen, v))
}

// LastSeenContains applies the Contains predicate on the "last_seen" field.
func LastSeenContains(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldContains(FieldLastSeen, v))
}

// LastSeenHasPrefix applies the HasPrefix predicate on the "last_seen" field.
func LastSeenHasPrefix(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldHasPrefix(FieldLastSeen, v))
}

// LastSeenHasSuffix applies the HasSuffix predicate on the "last_seen" field.
func LastSeenHasSuffix(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldHasSuffix(FieldLastSeen, v))
}

// LastSeenEqualFold applies the EqualFold predicate on the "last_seen" field.
func LastSeenEqualFold(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEqualFold(FieldLastSeen, v))
}

// LastSeenContainsFold applies the ContainsFold predicate on the "last_seen" field.
func LastSeenContainsFold(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldContainsFold(FieldLastSeen, v))
}

// HasNetworkDevice applies the HasEdge predicate on the "network_device" edge.
func HasNetworkDevice() predicate.DeviceStatus {
	return predicate.DeviceStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NetworkDeviceTable, NetworkDeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkDeviceWith applies the HasEdge predicate on the "network_device" edge with a given conditions (other predicates).
func HasNetworkDeviceWith(preds ...predicate.NetworkDevice) predicate.DeviceStatus {
	return predicate.DeviceStatus(func(s *sql.Selector) {
		step := newNetworkDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.NotPredicates(p))
}
