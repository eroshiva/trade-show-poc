// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/mocks/simulator.proto

package simulatorv1

import (
	context "context"
	monitoring "github.com/eroshiva/trade-show-poc/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MockDeviceService_GetStatus_FullMethodName    = "/simulator.v1.MockDeviceService/GetStatus"
	MockDeviceService_GetHWVersion_FullMethodName = "/simulator.v1.MockDeviceService/GetHWVersion"
	MockDeviceService_GetSWVersion_FullMethodName = "/simulator.v1.MockDeviceService/GetSWVersion"
	MockDeviceService_GetFWVersion_FullMethodName = "/simulator.v1.MockDeviceService/GetFWVersion"
)

// MockDeviceServiceClient is the client API for MockDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockDeviceServiceClient interface {
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.DeviceStatus, error)
	GetHWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetSWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.Version, error)
	GetFWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.Version, error)
}

type mockDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockDeviceServiceClient(cc grpc.ClientConnInterface) MockDeviceServiceClient {
	return &mockDeviceServiceClient{cc}
}

func (c *mockDeviceServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.DeviceStatus, error) {
	out := new(monitoring.DeviceStatus)
	err := c.cc.Invoke(ctx, MockDeviceService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockDeviceServiceClient) GetHWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, MockDeviceService_GetHWVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockDeviceServiceClient) GetSWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.Version, error) {
	out := new(monitoring.Version)
	err := c.cc.Invoke(ctx, MockDeviceService_GetSWVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockDeviceServiceClient) GetFWVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*monitoring.Version, error) {
	out := new(monitoring.Version)
	err := c.cc.Invoke(ctx, MockDeviceService_GetFWVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockDeviceServiceServer is the server API for MockDeviceService service.
// All implementations should embed UnimplementedMockDeviceServiceServer
// for forward compatibility
type MockDeviceServiceServer interface {
	GetStatus(context.Context, *emptypb.Empty) (*monitoring.DeviceStatus, error)
	GetHWVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error)
	GetSWVersion(context.Context, *emptypb.Empty) (*monitoring.Version, error)
	GetFWVersion(context.Context, *emptypb.Empty) (*monitoring.Version, error)
}

// UnimplementedMockDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMockDeviceServiceServer struct {
}

func (UnimplementedMockDeviceServiceServer) GetStatus(context.Context, *emptypb.Empty) (*monitoring.DeviceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedMockDeviceServiceServer) GetHWVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHWVersion not implemented")
}
func (UnimplementedMockDeviceServiceServer) GetSWVersion(context.Context, *emptypb.Empty) (*monitoring.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSWVersion not implemented")
}
func (UnimplementedMockDeviceServiceServer) GetFWVersion(context.Context, *emptypb.Empty) (*monitoring.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFWVersion not implemented")
}

// UnsafeMockDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockDeviceServiceServer will
// result in compilation errors.
type UnsafeMockDeviceServiceServer interface {
	mustEmbedUnimplementedMockDeviceServiceServer()
}

func RegisterMockDeviceServiceServer(s grpc.ServiceRegistrar, srv MockDeviceServiceServer) {
	s.RegisterService(&MockDeviceService_ServiceDesc, srv)
}

func _MockDeviceService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockDeviceServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockDeviceService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockDeviceServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockDeviceService_GetHWVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockDeviceServiceServer).GetHWVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockDeviceService_GetHWVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockDeviceServiceServer).GetHWVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockDeviceService_GetSWVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockDeviceServiceServer).GetSWVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockDeviceService_GetSWVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockDeviceServiceServer).GetSWVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockDeviceService_GetFWVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockDeviceServiceServer).GetFWVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockDeviceService_GetFWVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockDeviceServiceServer).GetFWVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MockDeviceService_ServiceDesc is the grpc.ServiceDesc for MockDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulator.v1.MockDeviceService",
	HandlerType: (*MockDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _MockDeviceService_GetStatus_Handler,
		},
		{
			MethodName: "GetHWVersion",
			Handler:    _MockDeviceService_GetHWVersion_Handler,
		},
		{
			MethodName: "GetSWVersion",
			Handler:    _MockDeviceService_GetSWVersion_Handler,
		},
		{
			MethodName: "GetFWVersion",
			Handler:    _MockDeviceService_GetFWVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/mocks/simulator.proto",
}
