// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/monitoring.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceMonitoringService_UpdateDeviceList_FullMethodName = "/api.v1.DeviceMonitoringService/UpdateDeviceList"
	DeviceMonitoringService_GetDeviceList_FullMethodName    = "/api.v1.DeviceMonitoringService/GetDeviceList"
	DeviceMonitoringService_AddDevice_FullMethodName        = "/api.v1.DeviceMonitoringService/AddDevice"
	DeviceMonitoringService_DeleteDevice_FullMethodName     = "/api.v1.DeviceMonitoringService/DeleteDevice"
	DeviceMonitoringService_GetDeviceStatus_FullMethodName  = "/api.v1.DeviceMonitoringService/GetDeviceStatus"
	DeviceMonitoringService_GetSummary_FullMethodName       = "/api.v1.DeviceMonitoringService/GetSummary"
)

// DeviceMonitoringServiceClient is the client API for DeviceMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMonitoringServiceClient interface {
	// UpdateDeviceList allows to update list of the devices that are currently monitored in a PATCH fashion.
	// Response contains full list of monitored network devices reflecting recent changes.
	UpdateDeviceList(ctx context.Context, in *UpdateDeviceListRequest, opts ...grpc.CallOption) (*UpdateDeviceListResponse, error)
	// GetDeviceList allows to retrieve a list of all currently monitored network devices.
	GetDeviceList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceListResponse, error)
	// AddDevice allows to add a network device that would be monitored.
	// Response will contain device ID assigned internally by the system.
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error)
	// DeleteDevice allows to remove network device from the monitoring service.
	// In order to do so, you should remember ID assigned internally by the monitoring system.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// GetDeviceStatus allows to retrieve network device status in real time.
	GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error)
	// GetSummary allows to retrieve summary of network device monitoring.
	GetSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSummaryResponse, error)
}

type deviceMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMonitoringServiceClient(cc grpc.ClientConnInterface) DeviceMonitoringServiceClient {
	return &deviceMonitoringServiceClient{cc}
}

func (c *deviceMonitoringServiceClient) UpdateDeviceList(ctx context.Context, in *UpdateDeviceListRequest, opts ...grpc.CallOption) (*UpdateDeviceListResponse, error) {
	out := new(UpdateDeviceListResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_UpdateDeviceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMonitoringServiceClient) GetDeviceList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceListResponse, error) {
	out := new(GetDeviceListResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_GetDeviceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMonitoringServiceClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error) {
	out := new(AddDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_AddDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMonitoringServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMonitoringServiceClient) GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error) {
	out := new(GetDeviceStatusResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_GetDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMonitoringServiceClient) GetSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, DeviceMonitoringService_GetSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceMonitoringServiceServer is the server API for DeviceMonitoringService service.
// All implementations should embed UnimplementedDeviceMonitoringServiceServer
// for forward compatibility
type DeviceMonitoringServiceServer interface {
	// UpdateDeviceList allows to update list of the devices that are currently monitored in a PATCH fashion.
	// Response contains full list of monitored network devices reflecting recent changes.
	UpdateDeviceList(context.Context, *UpdateDeviceListRequest) (*UpdateDeviceListResponse, error)
	// GetDeviceList allows to retrieve a list of all currently monitored network devices.
	GetDeviceList(context.Context, *emptypb.Empty) (*GetDeviceListResponse, error)
	// AddDevice allows to add a network device that would be monitored.
	// Response will contain device ID assigned internally by the system.
	AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error)
	// DeleteDevice allows to remove network device from the monitoring service.
	// In order to do so, you should remember ID assigned internally by the monitoring system.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// GetDeviceStatus allows to retrieve network device status in real time.
	GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error)
	// GetSummary allows to retrieve summary of network device monitoring.
	GetSummary(context.Context, *emptypb.Empty) (*GetSummaryResponse, error)
}

// UnimplementedDeviceMonitoringServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceMonitoringServiceServer struct {
}

func (UnimplementedDeviceMonitoringServiceServer) UpdateDeviceList(context.Context, *UpdateDeviceListRequest) (*UpdateDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceList not implemented")
}
func (UnimplementedDeviceMonitoringServiceServer) GetDeviceList(context.Context, *emptypb.Empty) (*GetDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedDeviceMonitoringServiceServer) AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedDeviceMonitoringServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceMonitoringServiceServer) GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedDeviceMonitoringServiceServer) GetSummary(context.Context, *emptypb.Empty) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}

// UnsafeDeviceMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMonitoringServiceServer will
// result in compilation errors.
type UnsafeDeviceMonitoringServiceServer interface {
	mustEmbedUnimplementedDeviceMonitoringServiceServer()
}

func RegisterDeviceMonitoringServiceServer(s grpc.ServiceRegistrar, srv DeviceMonitoringServiceServer) {
	s.RegisterService(&DeviceMonitoringService_ServiceDesc, srv)
}

func _DeviceMonitoringService_UpdateDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).UpdateDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_UpdateDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).UpdateDeviceList(ctx, req.(*UpdateDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMonitoringService_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_GetDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).GetDeviceList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMonitoringService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_AddDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).AddDevice(ctx, req.(*AddDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMonitoringService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMonitoringService_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_GetDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).GetDeviceStatus(ctx, req.(*GetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMonitoringService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMonitoringServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMonitoringService_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMonitoringServiceServer).GetSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceMonitoringService_ServiceDesc is the grpc.ServiceDesc for DeviceMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceMonitoringService",
	HandlerType: (*DeviceMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDeviceList",
			Handler:    _DeviceMonitoringService_UpdateDeviceList_Handler,
		},
		{
			MethodName: "GetDeviceList",
			Handler:    _DeviceMonitoringService_GetDeviceList_Handler,
		},
		{
			MethodName: "AddDevice",
			Handler:    _DeviceMonitoringService_AddDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceMonitoringService_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _DeviceMonitoringService_GetDeviceStatus_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _DeviceMonitoringService_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/monitoring.proto",
}
