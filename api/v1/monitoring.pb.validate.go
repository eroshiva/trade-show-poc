// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/monitoring.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryResponseMultiError, or nil if none found.
func (m *GetSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DevicesTotal

	// no validation rules for DevicesUp

	// no validation rules for DevicesUnhealthy

	// no validation rules for DownDevices

	if len(errors) > 0 {
		return GetSummaryResponseMultiError(errors)
	}

	return nil
}

// GetSummaryResponseMultiError is an error wrapping multiple validation errors
// returned by GetSummaryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryResponseMultiError) AllErrors() []error { return m }

// GetSummaryResponseValidationError is the validation error returned by
// GetSummaryResponse.Validate if the designated constraints aren't met.
type GetSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryResponseValidationError) ErrorName() string {
	return "GetSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryResponseValidationError{}

// Validate checks the field values on AddDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceRequestMultiError, or nil if none found.
func (m *AddDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDeviceRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDeviceRequestMultiError(errors)
	}

	return nil
}

// AddDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by AddDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceRequestMultiError) AllErrors() []error { return m }

// AddDeviceRequestValidationError is the validation error returned by
// AddDeviceRequest.Validate if the designated constraints aren't met.
type AddDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceRequestValidationError) ErrorName() string { return "AddDeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceRequestValidationError{}

// Validate checks the field values on AddDeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceResponseMultiError, or nil if none found.
func (m *AddDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Added

	if m.Details != nil {
		// no validation rules for Details
	}

	if len(errors) > 0 {
		return AddDeviceResponseMultiError(errors)
	}

	return nil
}

// AddDeviceResponseMultiError is an error wrapping multiple validation errors
// returned by AddDeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceResponseMultiError) AllErrors() []error { return m }

// AddDeviceResponseValidationError is the validation error returned by
// AddDeviceResponse.Validate if the designated constraints aren't met.
type AddDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceResponseValidationError) ErrorName() string {
	return "AddDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceResponseValidationError{}

// Validate checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceRequestMultiError, or nil if none found.
func (m *DeleteDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDeviceRequestMultiError(errors)
	}

	return nil
}

// DeleteDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceRequestValidationError is the validation error returned by
// DeleteDeviceRequest.Validate if the designated constraints aren't met.
type DeleteDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceRequestValidationError) ErrorName() string {
	return "DeleteDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceRequestValidationError{}

// Validate checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceResponseMultiError, or nil if none found.
func (m *DeleteDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Deleted

	if m.Details != nil {
		// no validation rules for Details
	}

	if len(errors) > 0 {
		return DeleteDeviceResponseMultiError(errors)
	}

	return nil
}

// DeleteDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceResponseMultiError) AllErrors() []error { return m }

// DeleteDeviceResponseValidationError is the validation error returned by
// DeleteDeviceResponse.Validate if the designated constraints aren't met.
type DeleteDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceResponseValidationError) ErrorName() string {
	return "DeleteDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceResponseValidationError{}

// Validate checks the field values on GetDeviceStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceStatusRequestMultiError, or nil if none found.
func (m *GetDeviceStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceStatusRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceStatusRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceStatusRequestValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceStatusRequestMultiError(errors)
	}

	return nil
}

// GetDeviceStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeviceStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceStatusRequestMultiError) AllErrors() []error { return m }

// GetDeviceStatusRequestValidationError is the validation error returned by
// GetDeviceStatusRequest.Validate if the designated constraints aren't met.
type GetDeviceStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceStatusRequestValidationError) ErrorName() string {
	return "GetDeviceStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceStatusRequestValidationError{}

// Validate checks the field values on GetDeviceStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceStatusResponseMultiError, or nil if none found.
func (m *GetDeviceStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceStatusResponseValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceStatusResponseValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceStatusResponseValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GetDeviceStatusResponseMultiError(errors)
	}

	return nil
}

// GetDeviceStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeviceStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceStatusResponseMultiError) AllErrors() []error { return m }

// GetDeviceStatusResponseValidationError is the validation error returned by
// GetDeviceStatusResponse.Validate if the designated constraints aren't met.
type GetDeviceStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceStatusResponseValidationError) ErrorName() string {
	return "GetDeviceStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceStatusResponseValidationError{}

// Validate checks the field values on UpdateDeviceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceListRequestMultiError, or nil if none found.
func (m *UpdateDeviceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDeviceListRequestValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDeviceListRequestValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDeviceListRequestValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDeviceListRequestMultiError(errors)
	}

	return nil
}

// UpdateDeviceListRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceListRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceListRequestMultiError) AllErrors() []error { return m }

// UpdateDeviceListRequestValidationError is the validation error returned by
// UpdateDeviceListRequest.Validate if the designated constraints aren't met.
type UpdateDeviceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceListRequestValidationError) ErrorName() string {
	return "UpdateDeviceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceListRequestValidationError{}

// Validate checks the field values on UpdateDeviceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceListResponseMultiError, or nil if none found.
func (m *UpdateDeviceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDeviceListResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDeviceListResponseMultiError(errors)
	}

	return nil
}

// UpdateDeviceListResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceListResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceListResponseMultiError) AllErrors() []error { return m }

// UpdateDeviceListResponseValidationError is the validation error returned by
// UpdateDeviceListResponse.Validate if the designated constraints aren't met.
type UpdateDeviceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceListResponseValidationError) ErrorName() string {
	return "UpdateDeviceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceListResponseValidationError{}

// Validate checks the field values on GetDeviceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceListResponseMultiError, or nil if none found.
func (m *GetDeviceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeviceListResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDeviceListResponseMultiError(errors)
	}

	return nil
}

// GetDeviceListResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeviceListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceListResponseMultiError) AllErrors() []error { return m }

// GetDeviceListResponseValidationError is the validation error returned by
// GetDeviceListResponse.Validate if the designated constraints aren't met.
type GetDeviceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceListResponseValidationError) ErrorName() string {
	return "GetDeviceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceListResponseValidationError{}

// Validate checks the field values on NetworkDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkDevice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkDeviceMultiError, or
// nil if none found.
func (m *NetworkDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Vendor

	// no validation rules for Model

	for idx, item := range m.GetEndpoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkDeviceValidationError{
						field:  fmt.Sprintf("Endpoint[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkDeviceValidationError{
						field:  fmt.Sprintf("Endpoint[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkDeviceValidationError{
					field:  fmt.Sprintf("Endpoint[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HwVersion

	if all {
		switch v := interface{}(m.GetSwVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "SwVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "SwVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSwVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkDeviceValidationError{
				field:  "SwVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFwVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "FwVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "FwVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFwVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkDeviceValidationError{
				field:  "FwVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetLastSeen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkDeviceValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkDeviceValidationError{
				field:  "LastSeen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkDeviceMultiError(errors)
	}

	return nil
}

// NetworkDeviceMultiError is an error wrapping multiple validation errors
// returned by NetworkDevice.ValidateAll() if the designated constraints
// aren't met.
type NetworkDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkDeviceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkDeviceMultiError) AllErrors() []error { return m }

// NetworkDeviceValidationError is the validation error returned by
// NetworkDevice.Validate if the designated constraints aren't met.
type NetworkDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkDeviceValidationError) ErrorName() string { return "NetworkDeviceValidationError" }

// Error satisfies the builtin error interface
func (e NetworkDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkDeviceValidationError{}

// Validate checks the field values on Endpoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointMultiError, or nil
// if none found.
func (m *Endpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Protocol

	if len(errors) > 0 {
		return EndpointMultiError(errors)
	}

	return nil
}

// EndpointMultiError is an error wrapping multiple validation errors returned
// by Endpoint.ValidateAll() if the designated constraints aren't met.
type EndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointMultiError) AllErrors() []error { return m }

// EndpointValidationError is the validation error returned by
// Endpoint.Validate if the designated constraints aren't met.
type EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointValidationError) ErrorName() string { return "EndpointValidationError" }

// Error satisfies the builtin error interface
func (e EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointValidationError{}

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VersionMultiError, or nil if none found.
func (m *Version) ValidateAll() error {
	return m.validate(true)
}

func (m *Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Checksum

	if len(errors) > 0 {
		return VersionMultiError(errors)
	}

	return nil
}

// VersionMultiError is an error wrapping multiple validation errors returned
// by Version.ValidateAll() if the designated constraints aren't met.
type VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMultiError) AllErrors() []error { return m }

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}
